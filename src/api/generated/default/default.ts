/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Auth API (—Ç–µ—Å—Ç–æ–≤–æ–µ)
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import type {
  AuthError,
  EmptyData,
  GoogleRequest,
  LoginCodeRequest,
  LoginEmailRequest,
  PostV1UserRegisterCodeBody,
  RegisterCodeSuccess,
  RegisterEmailRequest,
  SessionSuccess,
  ValidationError,
  WrongPinError,
} from '.././model';

/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ (–ø–æ–ª—É—á–∏—Ç—å login_code)
 */
export const postV1UserRegisterCode = (
  postV1UserRegisterCodeBody: PostV1UserRegisterCodeBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RegisterCodeSuccess>> => {
  return axios.post(
    '/v1/user/register/code',
    postV1UserRegisterCodeBody,
    options,
  );
};

export const getPostV1UserRegisterCodeMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UserRegisterCode>>,
    TError,
    { data: PostV1UserRegisterCodeBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1UserRegisterCode>>,
  TError,
  { data: PostV1UserRegisterCodeBody },
  TContext
> => {
  const mutationKey = ['postV1UserRegisterCode'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UserRegisterCode>>,
    { data: PostV1UserRegisterCodeBody }
  > = (props) => {
    const { data } = props ?? {};

    return postV1UserRegisterCode(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1UserRegisterCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UserRegisterCode>>
>;
export type PostV1UserRegisterCodeMutationBody = PostV1UserRegisterCodeBody;
export type PostV1UserRegisterCodeMutationError = AxiosError<unknown>;

/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ (–ø–æ–ª—É—á–∏—Ç—å login_code)
 */
export const usePostV1UserRegisterCode = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1UserRegisterCode>>,
      TError,
      { data: PostV1UserRegisterCodeBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1UserRegisterCode>>,
  TError,
  { data: PostV1UserRegisterCodeBody },
  TContext
> => {
  const mutationOptions = getPostV1UserRegisterCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email
 */
export const postV1UserRegisterEmail = (
  registerEmailRequest: RegisterEmailRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<EmptyData>> => {
  return axios.post('/v1/user/register/email', registerEmailRequest, options);
};

export const getPostV1UserRegisterEmailMutationOptions = <
  TError = AxiosError<ValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UserRegisterEmail>>,
    TError,
    { data: RegisterEmailRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1UserRegisterEmail>>,
  TError,
  { data: RegisterEmailRequest },
  TContext
> => {
  const mutationKey = ['postV1UserRegisterEmail'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UserRegisterEmail>>,
    { data: RegisterEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1UserRegisterEmail(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1UserRegisterEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UserRegisterEmail>>
>;
export type PostV1UserRegisterEmailMutationBody = RegisterEmailRequest;
export type PostV1UserRegisterEmailMutationError = AxiosError<ValidationError>;

/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email
 */
export const usePostV1UserRegisterEmail = <
  TError = AxiosError<ValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1UserRegisterEmail>>,
      TError,
      { data: RegisterEmailRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1UserRegisterEmail>>,
  TError,
  { data: RegisterEmailRequest },
  TContext
> => {
  const mutationOptions = getPostV1UserRegisterEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary –í—Ö–æ–¥ –ø–æ email + 6-–∑–Ω–∞—á–Ω—ã–π PIN
 */
export const postV1AuthLoginEmail = (
  loginEmailRequest: LoginEmailRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SessionSuccess>> => {
  return axios.post('/v1/auth/login/email', loginEmailRequest, options);
};

export const getPostV1AuthLoginEmailMutationOptions = <
  TError = AxiosError<WrongPinError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1AuthLoginEmail>>,
    TError,
    { data: LoginEmailRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1AuthLoginEmail>>,
  TError,
  { data: LoginEmailRequest },
  TContext
> => {
  const mutationKey = ['postV1AuthLoginEmail'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1AuthLoginEmail>>,
    { data: LoginEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1AuthLoginEmail(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1AuthLoginEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1AuthLoginEmail>>
>;
export type PostV1AuthLoginEmailMutationBody = LoginEmailRequest;
export type PostV1AuthLoginEmailMutationError = AxiosError<WrongPinError>;

/**
 * @summary –í—Ö–æ–¥ –ø–æ email + 6-–∑–Ω–∞—á–Ω—ã–π PIN
 */
export const usePostV1AuthLoginEmail = <
  TError = AxiosError<WrongPinError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1AuthLoginEmail>>,
      TError,
      { data: LoginEmailRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1AuthLoginEmail>>,
  TError,
  { data: LoginEmailRequest },
  TContext
> => {
  const mutationOptions = getPostV1AuthLoginEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary –í—Ö–æ–¥ –∞–Ω–æ–Ω–∏–º–Ω—ã–º login_code
 */
export const postV1AuthLoginCode = (
  loginCodeRequest: LoginCodeRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SessionSuccess>> => {
  return axios.post('/v1/auth/login/code', loginCodeRequest, options);
};

export const getPostV1AuthLoginCodeMutationOptions = <
  TError = AxiosError<AuthError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1AuthLoginCode>>,
    TError,
    { data: LoginCodeRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1AuthLoginCode>>,
  TError,
  { data: LoginCodeRequest },
  TContext
> => {
  const mutationKey = ['postV1AuthLoginCode'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1AuthLoginCode>>,
    { data: LoginCodeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1AuthLoginCode(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1AuthLoginCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1AuthLoginCode>>
>;
export type PostV1AuthLoginCodeMutationBody = LoginCodeRequest;
export type PostV1AuthLoginCodeMutationError = AxiosError<AuthError>;

/**
 * @summary –í—Ö–æ–¥ –∞–Ω–æ–Ω–∏–º–Ω—ã–º login_code
 */
export const usePostV1AuthLoginCode = <
  TError = AxiosError<AuthError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1AuthLoginCode>>,
      TError,
      { data: LoginCodeRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1AuthLoginCode>>,
  TError,
  { data: LoginCodeRequest },
  TContext
> => {
  const mutationOptions = getPostV1AuthLoginCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google (OAuth)
 */
export const postV1UserRegisterGoogleAccount = (
  googleRequest: GoogleRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SessionSuccess>> => {
  return axios.post('/v1/user/register/google_account', googleRequest, options);
};

export const getPostV1UserRegisterGoogleAccountMutationOptions = <
  TError = AxiosError<AuthError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postV1UserRegisterGoogleAccount>>,
    TError,
    { data: GoogleRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postV1UserRegisterGoogleAccount>>,
  TError,
  { data: GoogleRequest },
  TContext
> => {
  const mutationKey = ['postV1UserRegisterGoogleAccount'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postV1UserRegisterGoogleAccount>>,
    { data: GoogleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postV1UserRegisterGoogleAccount(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostV1UserRegisterGoogleAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof postV1UserRegisterGoogleAccount>>
>;
export type PostV1UserRegisterGoogleAccountMutationBody = GoogleRequest;
export type PostV1UserRegisterGoogleAccountMutationError =
  AxiosError<AuthError>;

/**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google (OAuth)
 */
export const usePostV1UserRegisterGoogleAccount = <
  TError = AxiosError<AuthError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postV1UserRegisterGoogleAccount>>,
      TError,
      { data: GoogleRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postV1UserRegisterGoogleAccount>>,
  TError,
  { data: GoogleRequest },
  TContext
> => {
  const mutationOptions =
    getPostV1UserRegisterGoogleAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
