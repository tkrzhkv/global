/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Auth API (—Ç–µ—Å—Ç–æ–≤–æ–µ)
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';

import { http, HttpResponse, delay } from 'msw';

import type {
  EmptyData,
  RegisterCodeSuccess,
  SessionSuccess,
} from '.././model';

export const getPostV1UserRegisterCodeResponseMock = (
  overrideResponse: Partial<RegisterCodeSuccess> = {},
): RegisterCodeSuccess => ({
  data: faker.helpers.arrayElement([
    {
      login_code: faker.helpers.arrayElement([
        faker.string.alpha(20),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1UserRegisterEmailResponseMock = (
  overrideResponse: Partial<EmptyData> = {},
): EmptyData => ({
  data: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1AuthLoginEmailResponseMock = (
  overrideResponse: Partial<SessionSuccess> = {},
): SessionSuccess => ({
  data: faker.helpers.arrayElement([
    {
      session: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1AuthLoginCodeResponseMock = (
  overrideResponse: Partial<SessionSuccess> = {},
): SessionSuccess => ({
  data: faker.helpers.arrayElement([
    {
      session: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1UserRegisterGoogleAccountResponseMock = (
  overrideResponse: Partial<SessionSuccess> = {},
): SessionSuccess => ({
  data: faker.helpers.arrayElement([
    {
      session: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostV1UserRegisterCodeMockHandler = (
  overrideResponse?:
    | RegisterCodeSuccess
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RegisterCodeSuccess> | RegisterCodeSuccess),
) => {
  return http.post('*/v1/user/register/code', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UserRegisterCodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPostV1UserRegisterEmailMockHandler = (
  overrideResponse?:
    | EmptyData
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<EmptyData> | EmptyData),
) => {
  return http.post('*/v1/user/register/email', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UserRegisterEmailResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPostV1AuthLoginEmailMockHandler = (
  overrideResponse?:
    | SessionSuccess
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SessionSuccess> | SessionSuccess),
) => {
  return http.post('*/v1/auth/login/email', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1AuthLoginEmailResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPostV1AuthLoginCodeMockHandler = (
  overrideResponse?:
    | SessionSuccess
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SessionSuccess> | SessionSuccess),
) => {
  return http.post('*/v1/auth/login/code', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1AuthLoginCodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getPostV1UserRegisterGoogleAccountMockHandler = (
  overrideResponse?:
    | SessionSuccess
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SessionSuccess> | SessionSuccess),
) => {
  return http.post('*/v1/user/register/google_account', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getPostV1UserRegisterGoogleAccountResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getDefaultMock = () => [
  getPostV1UserRegisterCodeMockHandler(),
  getPostV1UserRegisterEmailMockHandler(),
  getPostV1AuthLoginEmailMockHandler(),
  getPostV1AuthLoginCodeMockHandler(),
  getPostV1UserRegisterGoogleAccountMockHandler(),
];
